/**
 * Filesystem Cache
 *
 * Given a file and a transform function, cache the result into files
 * or retrieve the previously cached files if the given file is already known.
 *
 * @see https://github.com/babel/babel-loader/issues/34
 * @see https://github.com/babel/babel-loader/pull/41
 */
var fs = require("fs");

var os = require("os");

var path = require("path");

var zlib = require("zlib");

var crypto = require("crypto");

var mkdirp = require("mkdirp");

var findCacheDir = require("find-cache-dir");

var transform = require("./transform"); // Lazily instantiated when needed


var cacheDirectory = null;
/**
 * Read the contents from the compressed file.
 *
 * @async
 * @params {String} filename
 * @params {Function} callback
 */

var read = function read(filename, callback) {
  return fs.readFile(filename, function (err, data) {
    if (err) return callback(err);
    return zlib.gunzip(data, function (err, content) {
      if (err) return callback(err);
      var result = Object.create(null);

      try {
        result = JSON.parse(content);
      } catch (e) {
        return callback(e);
      }

      return callback(null, result);
    });
  });
};
/**
 * Write contents into a compressed file.
 *
 * @async
 * @params {String} filename
 * @params {String} result
 * @params {Function} callback
 */


var write = function write(filename, result, callback) {
  var content = JSON.stringify(result);
  return zlib.gzip(content, function (err, data) {
    if (err) return callback(err);
    return fs.writeFile(filename, data, callback);
  });
};
/**
 * Build the filename for the cached file
 *
 * @params {String} source  File source code
 * @params {Object} options Options used
 *
 * @return {String}
 */


var filename = function filename(source, identifier, options) {
  var hash = crypto.createHash("SHA1");
  var contents = JSON.stringify({
    source,
    options,
    identifier
  });
  hash.end(contents);
  return hash.read().toString("hex") + ".json.gz";
};
/**
 * Handle the cache
 *
 * @params {String} directory
 * @params {Object} params
 * @params {Function} callback
 */


var handleCache = function handleCache(directory, params, callback) {
  var source = params.source,
      _params$options = params.options,
      options = _params$options === void 0 ? {} : _params$options,
      cacheIdentifier = params.cacheIdentifier;
  var fallback = typeof params.directory !== "string" && directory !== os.tmpdir(); // Make sure the directory exists.

  mkdirp(directory, function (err) {
    // Fallback to tmpdir if node_modules folder not writable
    if (err) {
      return fallback ? handleCache(os.tmpdir(), params, callback) : callback(err);
    }

    var file = path.join(directory, filename(source, cacheIdentifier, options));
    return read(file, function (err, content) {
      // No errors mean that the file was previously cached
      // we just need to return it
      if (!err) return callback(null, content); // Otherwise just transform the file
      // return it to the user asap and write it in cache

      return transform(source, options, function (err, result) {
        if (err) return callback(err);
        return write(file, result, function (err) {
          // Fallback to tmpdir if node_modules folder not writable
          if (err) {
            return fallback ? handleCache(os.tmpdir(), params, callback) : callback(err);
          }

          return callback(null, result);
        });
      });
    });
  });
};
/**
 * Retrieve file from cache, or create a new one for future reads
 *
 * @async
 * @param  {Object}   params
 * @param  {String}   params.directory  Directory to store cached files
 * @param  {String}   params.identifier Unique identifier to bust cache
 * @param  {String}   params.source   Original contents of the file to be cached
 * @param  {Object}   params.options  Options to be given to the transform fn
 * @param  {Function} params.transform  Function that will transform the
 *                                      original file and whose result will be
 *                                      cached
 *
 * @param  {Function<err, result>} callback
 *
 * @example
 *
 *   cache({
 *     directory: '.tmp/cache',
 *     identifier: 'babel-loader-cachefile',
 *     source: *source code from file*,
 *     options: {
 *       experimental: true,
 *       runtime: true
 *     },
 *     transform: function(source, options) {
 *       var content = *do what you need with the source*
 *       return content;
 *     }
 *   }, function(err, result) {
 *
 *   });
 */


module.exports = function (params, callback) {
  var directory;

  if (typeof params.cacheDirectory === "string") {
    directory = params.cacheDirectory;
  } else {
    if (cacheDirectory === null) {
      cacheDirectory = findCacheDir({
        name: "babel-loader"
      }) || os.tmpdir();
    }

    directory = cacheDirectory;
  }

  handleCache(directory, params, callback);
};