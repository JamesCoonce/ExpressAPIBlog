"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _helperPluginUtils() {
  var data = require("@babel/helper-plugin-utils");

  _helperPluginUtils = function _helperPluginUtils() {
    return data;
  };

  return data;
}

function _pluginSyntaxFunctionBind() {
  var data = _interopRequireDefault(require("@babel/plugin-syntax-function-bind"));

  _pluginSyntaxFunctionBind = function _pluginSyntaxFunctionBind() {
    return data;
  };

  return data;
}

function _core() {
  var data = require("@babel/core");

  _core = function _core() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _helperPluginUtils().declare)(function (api) {
  api.assertVersion(7);

  function getTempId(scope) {
    var id = scope.path.getData("functionBind");
    if (id) return id;
    id = scope.generateDeclaredUidIdentifier("context");
    return scope.path.setData("functionBind", id);
  }

  function getStaticContext(bind, scope) {
    var object = bind.object || bind.callee.object;
    return scope.isStatic(object) && object;
  }

  function inferBindContext(bind, scope) {
    var staticContext = getStaticContext(bind, scope);
    if (staticContext) return _core().types.cloneNode(staticContext);
    var tempId = getTempId(scope);

    if (bind.object) {
      bind.callee = _core().types.sequenceExpression([_core().types.assignmentExpression("=", tempId, bind.object), bind.callee]);
    } else {
      bind.callee.object = _core().types.assignmentExpression("=", tempId, bind.callee.object);
    }

    return tempId;
  }

  return {
    inherits: _pluginSyntaxFunctionBind().default,
    visitor: {
      CallExpression: function CallExpression(_ref) {
        var node = _ref.node,
            scope = _ref.scope;
        var bind = node.callee;
        if (!_core().types.isBindExpression(bind)) return;
        var context = inferBindContext(bind, scope);
        node.callee = _core().types.memberExpression(bind.callee, _core().types.identifier("call"));
        node.arguments.unshift(context);
      },
      BindExpression: function BindExpression(path) {
        var node = path.node,
            scope = path.scope;
        var context = inferBindContext(node, scope);
        path.replaceWith(_core().types.callExpression(_core().types.memberExpression(node.callee, _core().types.identifier("bind")), [context]));
      }
    }
  };
});

exports.default = _default;