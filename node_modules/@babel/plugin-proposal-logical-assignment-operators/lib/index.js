"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _helperPluginUtils() {
  var data = require("@babel/helper-plugin-utils");

  _helperPluginUtils = function _helperPluginUtils() {
    return data;
  };

  return data;
}

function _pluginSyntaxLogicalAssignmentOperators() {
  var data = _interopRequireDefault(require("@babel/plugin-syntax-logical-assignment-operators"));

  _pluginSyntaxLogicalAssignmentOperators = function _pluginSyntaxLogicalAssignmentOperators() {
    return data;
  };

  return data;
}

function _core() {
  var data = require("@babel/core");

  _core = function _core() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _helperPluginUtils().declare)(function (api) {
  api.assertVersion(7);
  return {
    inherits: _pluginSyntaxLogicalAssignmentOperators().default,
    visitor: {
      AssignmentExpression: function AssignmentExpression(path) {
        var node = path.node,
            scope = path.scope;
        var operator = node.operator,
            left = node.left,
            right = node.right;

        if (operator !== "||=" && operator !== "&&=" && operator !== "??=") {
          return;
        }

        var lhs = _core().types.cloneNode(left);

        if (_core().types.isMemberExpression(left)) {
          var object = left.object,
              property = left.property,
              computed = left.computed;
          var memo = scope.maybeGenerateMemoised(object);

          if (memo) {
            left.object = memo;
            lhs.object = _core().types.assignmentExpression("=", _core().types.cloneNode(memo), object);
          }

          if (computed) {
            var _memo = scope.maybeGenerateMemoised(property);

            if (_memo) {
              left.property = _memo;
              lhs.property = _core().types.assignmentExpression("=", _core().types.cloneNode(_memo), property);
            }
          }
        }

        path.replaceWith(_core().types.logicalExpression(operator.slice(0, -1), lhs, _core().types.assignmentExpression("=", left, right)));
      }
    }
  };
});

exports.default = _default;