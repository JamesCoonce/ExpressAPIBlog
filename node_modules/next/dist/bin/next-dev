#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _entries = _interopRequireDefault(require("@babel/runtime/core-js/object/entries"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = require("path");

var _minimist = _interopRequireDefault(require("minimist"));

var _fs = require("fs");

var _server = _interopRequireDefault(require("../server"));

var _utils = require("../lib/utils");

var argv = (0, _minimist.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    H: 'hostname',
    p: 'port'
  },
  boolean: ['h'],
  string: ['H'],
  default: {
    p: 3000
  }
});

if (argv.help) {
  console.log("\n    Description\n      Starts the application in development mode (hot-code reloading, error\n      reporting, etc)\n\n    Usage\n      $ next dev <dir> -p <port number>\n\n    <dir> represents where the compiled folder should go.\n    If no directory is provided, the folder will be created in the current directory.\n    You can set a custom folder in config https://github.com/zeit/next.js#custom-configuration.\n\n    Options\n      --port, -p      A port number on which to start the application\n      --hostname, -H  Hostname on which to start the application\n      --help, -h      Displays this message\n  ");
  process.exit(0);
}

var dir = (0, _path.resolve)(argv._[0] || '.'); // Check if pages dir exists and warn if not

if (!(0, _fs.existsSync)(dir)) {
  (0, _utils.printAndExit)("> No such directory exists as the project root: ".concat(dir));
}

if (!(0, _fs.existsSync)((0, _path.join)(dir, 'pages'))) {
  if ((0, _fs.existsSync)((0, _path.join)(dir, '..', 'pages'))) {
    (0, _utils.printAndExit)('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?');
  }

  (0, _utils.printAndExit)('> Couldn\'t find a `pages` directory. Please create one under the project root');
}

var srv = new _server.default({
  dir: dir,
  dev: true
});
srv.start(argv.port, argv.hostname).then(
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  return _regenerator.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!process.env.NOW) {
            console.log("> Ready on http://".concat(argv.hostname ? argv.hostname : 'localhost', ":").concat(argv.port));
          }

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}))).catch(function (err) {
  if (err.code === 'EADDRINUSE') {
    var errorMessage = "Port ".concat(argv.port, " is already in use.");

    var pkgAppPath = require('find-up').sync('package.json', {
      cwd: dir
    });

    var appPackage = JSON.parse((0, _fs.readFileSync)(pkgAppPath, 'utf8'));
    var nextScript = (0, _entries.default)(appPackage.scripts).find(function (scriptLine) {
      return scriptLine[1] === 'next';
    });
    if (nextScript) errorMessage += "\nUse `npm run ".concat(nextScript[0], " -- -p <some other port>`.");
    console.error(errorMessage);
  } else {
    console.error(err);
  }

  process.nextTick(function () {
    return process.exit(1);
  });
});